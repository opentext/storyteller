swagger: "2.0"
info:
  version: "0.1.0"
  title: "StoryTeller Service API"
  contact:
    email: "pfilipsk@opentext.com"
  description: |
    This is a *StoryTeller service API*. You can find out more about StoryTeller, its Document Model
    and associated services at [StoryTeller Develoment Documentation](https://opentext.github.io/storyteller/)."
    # Introduction
    As part of the *Document Platform* we provide lots of general and valuable components and 
    services which could be re-used in many other contexts outside the *Document Platform*.
    Those services are currently available inside the product and inside the document embedded 
    javascript, but we would like to be used in many other contexts as well.
    So now we are wrap the available services to a REST interface and also provide 
    a thin Javascript HTTP/REST Client Proxy for completeness. This approach opens lots of new 
    possibilities how to combine the available elements without introducing unnecessary platform 
    or language dependencies.
    It is just a matter of configuration whether we call the service locally (in-process) 
    or remotely (in a separate process), or whether we use the client code in curl, python script, 
    or in a web browser and communicate with a server via network connection.
    ## Storage
    The first facility we expose via the API is the *Storage* service. It simply serves as 
    a [Content Addressable Storage](http://en.wikipedia.org/wiki/Content-addressable_storage), 
    it enables storing any blob of data (represented as a stream),
    retrieving a content based hash key for any data uploaded and then using the key for obtaining 
    the same data back or using it for other service calls.
    The [SHA-1](http://en.wikipedia.org/wiki/SHA-1) cryptographic (20-bytes) hash function is used 
    for key computation and so there is a very high collision resistance. This cryptographic function 
    is very robust and future proof (other tools like [Git](http://en.wikipedia.org/wiki/Git_%28software%29)
    [Distributed Revision Control](http://en.wikipedia.org/wiki/Distributed_revision_control) use the same 
    function successfully), but of course it can be easily replaced by a more robust alternative 
    ([SHA-2](http://en.wikipedia.org/wiki/SHA-2), [SHA-3](http://en.wikipedia.org/wiki/SHA-3), â€¦) 
    if there is such a need.
    ## Processor
    *Processor* represents a collection of computationally intensive services provided by *Document Platform*
    to clients. Right now we expose two such *Services*:
    - TDT transformation
    - Document Formatter
    but will expose more services in near future.
    # Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with 
    [W3C spec](https://www.w3.org/TR/cors/). That allows cross-domain communication from the browser.
    All responses can have a wildcard same-origin which makes them completely public and accessible to everyone, 
    including any code on any site if we decide to do so.
    # Authentication
    Currently there is no authentication necessary for using the service but server maintains a notion 
    of user sessions. That means that any files uploaded or created during a session are accessible
    from that particular session only. Clients are responsible for re-sending a server generated cookie
    representing particular session. Uploaded files are guaranteed to be preserved on the server only 
    for a lifetime of particular session.
host: "cem-dev-karim.eastus.cloudapp.azure.com"
basePath: "/storyteller/api"
externalDocs:
  description: Find out more about StoryTeller services and APIs
  url: 'https://opentext.github.io/storyteller/'
securityDefinitions:
  sessionCookie:
    description: Use session cookie to maintain a single session representing recently uploaded and/or created files.
    type: apiKey
    name: Cookie
    in: header
tags:
- name: "service"
  description: "Service API"
- name: "storage"
  description: "Storage API"
- name: "processor"
  description: "Processor API"
schemes:
- "https"
- "http"
paths:
  /ping:
    get:
      tags:
      - "service"
      summary: "Test whether the service is alive"
      description: "Can be used in watchdogs or other client code to determine whether the service is alive"
      operationId: "pingService"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PingResponse"
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET "$URL/storyteller/api/ping" -H "accept: application/json"
        - lang: 'javascript/jquery'
          source: |
            function ping(apiUrl, callback) {
              $.ajax({
                url: apiUrl + '/ping',
                type: 'GET',
                data: '',
                dataType: 'json',
                contentType: 'application/json',
                xhrFields: {
                  withCredentials: true
                },
                crossDomain: true,
                success: onSuccess(callback),
                error: onError(callback)
              });
            }
        - lang: 'python'
          source: |
            import requests

            def ping(url):
              return requests.get(url+'/ping').status_code == 200
  /files:
    post:
      tags:
      - "storage"
      summary: "Upload a file to the server"
      description: |
        From now on the uploaded files is present on the server and can be downloaded 
        or used in other API calls until the session expires.
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - in: formData
        name: file
        type: file
        required: true
        description: The file to upload.
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UploadResponse"
      security:
        - sessionCookie: []
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X POST "$URL/storyteller/api/files" -H "accept: application/json" -H "Content-Type: multipart/form-data" -F "file=@sample.svg;type=image/svg+xml"
        - lang: 'javascript/jquery'
          source: |
            function upload(apiUrl, name, content, mime, callback) {
              var form = new FormData();
              var blob = new Blob([content], {type: mime});
              form.append("fileToUpload", blob, name);
              $.ajax({
                url: apiUrl + '/files',
                type: 'POST',
                data: form,
                dataType: 'json',
                contentType: false,
                processData: false,
                xhrFields: {
                    withCredentials: true
                },
                crossDomain: true,
                success: onSuccess(callback),
                error: onError(callback)
              });
            }
        - lang: 'python'
          source: |
             import requests
             
             class Proxy:
               def __init__(self, url):
                 self.url = url + '/storyteller/api'
                 self.session = requests.Session()
               
               def upload(self, filepath, mimetype='application/octet-stream'):
                 files = {'file': (os.path.basename(filepath), open(filepath, 'rb'), mimetype)} 
                 return self.session.post(self.url+'/files', files=files).json()

  /files/{hashId}/contents:
    get:
      tags:
      - "storage"
      summary: "Get contents of a file"
      description: |
        Any uploaded file is uniquely represented by a hash and can be explicitly downloaded 
        or used as a resource link (e.g. as an image `href` attribute) during the session lifetime.   
      operationId: "serveFile"
      parameters:
      - name: "hashId"
        in: "path"
        description: "hash of the file content to be fetched"
        required: true
        type: "string"
      responses:
        200:
          description: "File content in binary form"
          schema:
            type: string
            format: binary
        400:
          description: "File not found"
      security:
        - sessionCookie: []
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X GET "$URL/storyteller/api/files/e9b2b6237eebcb085c8f025fc12fe2b1fa998195/contents" -H "accept: application/json"
        - lang: 'javascript/jquery'
          source: |
            function content(apiUrl, hash, callback) {
              $.ajax({
                url: apiUrl + /files/' + hash + '/contents',
                type: 'GET',
                contentType: false,
                processData: false,
                cache: true,
                xhrFields: {
                  withCredentials: true
                },
                crossDomain: true,
                success: onSuccess(callback),
                error: onError(callback)
              });
            }
        - lang: 'python'
          source: |
             import requests
             
             class Proxy:
               def __init__(self, url):
                 self.url = url + '/storyteller/api'
                 self.session = requests.Session()
               
               def content(self, hash):
                 return self.session.get(self.url+'/files/'+hash+'/contents').content
  /tdt:
    post:
      tags:
      - "processor"
      summary: "Transform given data based on given template and TDT rules"
      operationId: "processTDT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "Request of the TDT transform operation"
        schema:
          $ref:  "#/definitions/TdtRequest"
      responses:
        200:
          description: "Response of the TDT transform operation"
          schema:
            $ref: "#/definitions/TdtResponse"
      security:
        - sessionCookie: []
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X POST "$URL/storyteller/api/tdt" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"source\": \"7831f13d519651eba0b3a7fb236cc94fd9a156a1\", \"template\": \"7831f13d519651eba0b3a7fb236cc94fd9a156a1\", \"rules\": \"7831f13d519651eba0b3a7fb236cc94fd9a156a1\"}"
        - lang: 'javascript/jquery'
          source: |
            function tdt(apiUrl, source, template, rules, options, callback) {
              var inputs = {
                source: source,
                template: template,
                rules: rules,
                options: options,
              };
              $.ajax({
                url: apiUrl + '/tdt',
                type: 'POST',
                data: JSON.stringify(inputs),
                dataType: 'json',
                contentType: 'application/json',
                xhrFields: {
                  withCredentials: true
                },
                crossDomain: true,
                success: onSuccess(callback),
                error: onError(callback)
              });
            }
        - lang: 'python'
          source: |
             import requests
             
             class Proxy:
               def __init__(self, url):
                 self.url = url + '/storyteller/api'
                 self.session = requests.Session()
               
               def tdt(self, source, template, rules, options = {}):
                  data = {
                    'source': source,
                    'template': source,
                    'rules': source,
                    'options': options
                  }
                  return self.session.post(self.url+'/tdt', json=data).json()
  /stl:
    post:
      tags:
      - "processor"
      summary: "Create a document based on given layout and data"
      operationId: "processSTL"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "Request of the STL format operation"
        schema:
          $ref:  "#/definitions/StlRequest"
      responses:
        200:
          description: "Response of the STL format operation"
          schema:
            $ref: "#/definitions/StlResponse"
      security:
        - sessionCookie: []
      x-code-samples:
        - lang: 'curl'
          source: |
            curl -X POST "$URL/storyteller/api/stl" -H "accept: application/json" -H "Content-Type: application/json" -d "{ \"design\": \"7831f13d519651eba0b3a7fb236cc94fd9a156a1\", \"options\": { \"driver\": { \"type\": \"pdf\" }, \"properties\": { \"language\": \"en-US\" }, \"validate\": true }}"
        - lang: 'javascript/jquery'
          source: |
            function stl(apiUrl, design, data, options, callback) {
              var inputs = {
                design: design,
                data: data,
                options: options,
              };
              $.ajax({
                url: apiUrl + '/stl',
                type: 'POST',
                data: JSON.stringify(inputs),
                dataType: 'json',
                contentType: 'application/json',
                xhrFields: {
                  withCredentials: true
                },
                crossDomain: true,
                success: onSuccess(callback),
                error: onError(callback)
              });
            }
        - lang: 'python'
          source: |
             import requests
             
             class Proxy:
               def __init__(self, url):
                 self.url = url + '/storyteller/api'
                 self.session = requests.Session()
               
               def stl(self, design, data, options = {}):
                  data = {
                    'design': design,
                    'data': data,
                    'options': options
                  }
                  return self.session.post(self.url+'/stl', json=data).json()

  /xslt:
    post:
      tags:
      - "processor"
      summary: "Transform given XML document based on given XSLT schema"
      operationId: "processXSLT"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "Request of the XSLT format operation"
        schema:
          type: "object"
      responses:
        200:
          description: "Response of the XSLT format operation"
          schema:
            type: "object"
      security:
        - sessionCookie: []

  /xp:
    post:
      tags:
      - "processor"
      summary: "Process given XML document with XML Processor template engine"
      operationId: "processXP"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "Request of the XP process operation"
        schema:
          type: "object"
      responses:
        200:
          description: "Response of the XP process operation"
          schema:
            type: "object"
      security:
        - sessionCookie: []

  /xsd:
    post:
      tags:
      - "processor"
      summary: "Validate given XML document based on given XSD schema"
      operationId: "processXSD"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "Request of the XSD validation"
        schema:
          type: "object"
      responses:
        200:
          description: "Response of the XSD validation"
          schema:
            type: "object"
      security:
        - sessionCookie: []

  /svg:
    post:
      tags:
      - "processor"
      summary: "Render given SVG"
      operationId: "processSVG"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        description: "Request of the SVG rendering operation"
        schema:
          type: "object"
      responses:
        200:
          description: "Response of the SVG rendering operation"
          schema:
            type: "object"
      security:
        - sessionCookie: []

definitions:
  Status:
    description: "Status of the operation"
    type: "string"
    example: "success"
    enum:
      - "success"
      - "failure"
  FileHash:
    description: "SHA1 hash of the file content"
    type: "string"
    pattern: "^[A-Fa-f0-9]{40}$"
    example: 7831f13d519651eba0b3a7fb236cc94fd9a156a1
  FileType:
    description: "Content/Mime Type of the file"
    type: "string"
    example: application/xml
  FileName:
    description: "Name of the file"
    type: "string"
    example: document.xml
  FileSize:
    description: "Byte size of the file content"
    type: "integer"
    example: 1234
  File:
    description: "Representation of a server-side file"
    type: "object"
    properties:
      id:
        $ref:  "#/definitions/FileHash"
      name:
        $ref:  "#/definitions/FileName"
      size:
        $ref:  "#/definitions/FileSize"
      type:
        $ref:  "#/definitions/FileType"
  Files:
    type: "array"
    items:
      $ref:  "#/definitions/File"
  PingResponse:
    description: "Response of the ping operation"
    type: "object"
    properties:
      status:
        $ref:  "#/definitions/Status"
  UploadResponse:
    description: "Response of the upload operation"
    type: "object"
    properties:
      status:
        $ref:  "#/definitions/Status"
      result:
        $ref:  "#/definitions/Files"
  TdtOptions:
    description: "Options for TDT transform operation"
    type: "object"
    properties:
      mode:
        type: "integer"
      params:
        type: "object"
  TdtRequest:
    description: "Request of the TDT transform operation"
    type: "object"
    properties:
      source:
        $ref:  "#/definitions/FileHash"
      template:
        $ref:  "#/definitions/FileHash"
      rules:
        $ref:  "#/definitions/FileHash"
      options:
        $ref:  "#/definitions/TdtOptions"
  TdtResponse:
    description: "Response of the TDT transform operation"
    type: "object"
    properties:
      status:
        $ref:  "#/definitions/Status"
      input:
        $ref:  "#/definitions/TdtRequest"
      result:
        $ref:  "#/definitions/Files"
  StlOptions:
    description: "Options for STL format operation"
    type: "object"
    properties:
      data:
        description: "Data settings"
        type: "object"
      layout:
        type: "object"
      driver:
        type: "object"
      frame:
        type: "object"
      properties:
        type: "object"
      validate:
        type: "boolean"
  StlRequest:
    description: "Request of the TDT format operation"
    type: "object"
    properties:
      design:
        $ref:  "#/definitions/FileHash"
      options:
        $ref:  "#/definitions/StlOptions"
  StlResponse:
    description: "Response of the STL format operation"
    type: "object"
    properties:
      status:
        $ref:  "#/definitions/Status"
      input:
        $ref:  "#/definitions/StlRequest"
      result:
        $ref:  "#/definitions/Files"
